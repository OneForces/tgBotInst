from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.exc import SQLAlchemyError
from datetime import datetime

from db.database import async_session
from db.models import Subscriber, ReelsTask

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è submit_profile
class ProfileFSM(StatesGroup):
    waiting_for_instagram_login = State()
    waiting_for_instagram_password = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è submit_reels
class ReelsFSM(StatesGroup):
    waiting_for_reels_url = State()
    waiting_for_post_time = State()

# ========================== /submit_profile –∏ –∫–Ω–æ–ø–∫–∞ ==========================

@router.message(F.text.in_({"/submit_profile", "üìã –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å Instagram"}))
async def submit_profile(message: Message, state: FSMContext):
    await state.clear()
    print("[FSM] submit_profile –∑–∞–ø—É—â–µ–Ω")
    await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ Instagram –ª–æ–≥–∏–Ω:")
    await state.set_state(ProfileFSM.waiting_for_instagram_login)

@router.message(ProfileFSM.waiting_for_instagram_login)
async def process_login(message: Message, state: FSMContext):
    login = message.text.strip()
    if not login:
        await message.answer("‚ùó –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return

    await state.update_data(instagram_login=login)
    await message.answer("üîë –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç Instagram:")
    await state.set_state(ProfileFSM.waiting_for_instagram_password)

@router.message(ProfileFSM.waiting_for_instagram_password)
async def process_password(message: Message, state: FSMContext):
    password = message.text.strip()
    if not password:
        await message.answer("‚ùó –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return

    data = await state.get_data()
    instagram_login = data.get("instagram_login")

    async with async_session() as session:
        try:
            result = await session.execute(
                select(Subscriber).where(Subscriber.telegram_id == message.from_user.id)
            )
            if result.scalar_one_or_none():
                await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
                await state.clear()
                return

            subscriber = Subscriber(
                telegram_id=message.from_user.id,
                instagram_login=instagram_login,
                instagram_password=password
            )
            session.add(subscriber)
            await session.commit()
            print(f"[‚úÖ] –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {instagram_login}")

            await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        except SQLAlchemyError as e:
            print(f"[üí•] –û—à–∏–±–∫–∞ –ë–î: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
        finally:
            await state.clear()

# ========================== /submit_reels –∏ –∫–Ω–æ–ø–∫–∞ ==========================

@router.message(F.text.in_({"/submit_reels", "üé¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ Reels"}))
async def submit_reels(message: Message, state: FSMContext):
    await state.clear()
    print("[FSM] submit_reels –∑–∞–ø—É—â–µ–Ω")
    await message.answer("üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Reels:")
    await state.set_state(ReelsFSM.waiting_for_reels_url)

@router.message(ReelsFSM.waiting_for_reels_url)
async def process_reels_url(message: Message, state: FSMContext):
    url = message.text.strip()
    if not url.startswith("http"):
        await message.answer("‚ùó –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return

    await state.update_data(reels_url=url)
    await message.answer("üïí –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ø—Ä–∏–º–µ—Ä: 2025-05-10 14:30):")
    await state.set_state(ReelsFSM.waiting_for_post_time)

@router.message(ReelsFSM.waiting_for_post_time)
async def process_post_time(message: Message, state: FSMContext):
    raw = " ".join(message.text.strip().split())
    try:
        post_time = datetime.strptime(raw, "%Y-%m-%d %H:%M")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 2025-05-10 14:30")
        return

    data = await state.get_data()
    reels_url = data.get("reels_url")

    async with async_session() as session:
        try:
            result = await session.execute(
                select(Subscriber).where(Subscriber.telegram_id == message.from_user.id)
            )
            subscriber = result.scalar_one_or_none()
            if not subscriber:
                await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /submit_profile")
                await state.clear()
                return

            task = ReelsTask(
                subscriber_id=subscriber.id,
                reels_url=reels_url,
                post_time=post_time,
                status="scheduled"
            )
            session.add(task)
            await session.commit()
            print(f"[‚úÖ] –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {reels_url}")

            await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é!")
        except SQLAlchemyError as e:
            print(f"[üí•] –û—à–∏–±–∫–∞ –ë–î: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
        finally:
            await state.clear()
