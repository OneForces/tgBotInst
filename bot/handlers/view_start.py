from aiogram import Router, types
from instagram.automation.view_stories import create_viewer_driver, view_stories
from db.database import async_session
from db.models import StoryViewLog
from aiogram import F
from scheduler.cron_jobs import check_and_post_reels
from datetime import datetime

router = Router()
ADMIN_ID = 123456789  # ‚Üê –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID

@router.message(F.text.lower() == "–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä")
async def start_view(msg: types.Message):
    await msg.answer("‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–æ—Ä–∏—Å...")

    usernames = [
        "account_1", "account_2", "account_3"
    ]

    driver = create_viewer_driver()

    # üîπ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é ViewSession –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë ID
    async with async_session() as session:
        from db.models import ViewSession
        from datetime import datetime

        new_session = ViewSession(user_id=msg.from_user.id)
        session.add(new_session)
        await session.flush()
        session_id = new_session.id
        await session.commit()

    # üì≤ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    report = view_stories(driver, usernames)

    # ‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º ViewSession –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    async with async_session() as session:
        from instagram.manager import complete_session
        await complete_session(session, session_id)

    # üìù –õ–æ–≥–∏—Ä—É–µ–º StoryViewLog
    async with async_session() as session:
        for username, status_text in report:
            status = "viewed" if "‚úÖ" in status_text else "failed"
            log = StoryViewLog(
                viewer_telegram_id=msg.from_user.id,
                target_username=username,
                status=status,
                timestamp=datetime.utcnow()
            )
            session.add(log)
        await session.commit()

    # üìä –û—Ç—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_report = "\n".join([f"@{u}: {s}" for u, s in report])
    await msg.answer(f"üìä –í–∞—à –æ—Ç—á—ë—Ç:\n{user_report}")

    # üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_text = (
        f"üë§ <b>@{msg.from_user.username or '–ë–µ–∑ username'}</b> "
        f"(<code>{msg.from_user.id}</code>) –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å—Ç–æ—Ä–∏—Å:\n{user_report}"
    )
    await msg.bot.send_message(chat_id=ADMIN_ID, text=admin_text, parse_mode="HTML")

@router.message(F.text.lower() == "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
async def trigger_manual_check(message: types.Message):
    await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
    try:
        await check_and_post_reels()
        await message.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")