from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup
from aiogram.fsm.state import StatesGroup, State
from sqlalchemy import select
from datetime import datetime

from db.database import async_session
from db.models import Subscriber, ViewTask

router = Router()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class ViewFSM(StatesGroup):
    waiting_for_profiles = State()

# üì≤ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ KeyboardButton
main_keyboard = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [{"text": "üìã –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å Instagram"}],
        [{"text": "üé¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ Reels"}],
        [{"text": "üëÅ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä"}],
        [{"text": "üìä –ú–æ–π –æ—Ç—á—ë—Ç"}],
    ]
)

# üëã –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(F.text == "/start")
async def start_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å Reels –∏ —Å–æ–±—Ä–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ Instagram üìà\n\n"
        "–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:\n"
        "üìã ‚Äî —É–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏–Ω Instagram\n"
        "üé¨ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Reels-—Å—Å—ã–ª–∫—É –∏ –≤—Ä–µ–º—è\n"
        "üëÅ ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–æ—Ä–∏—Å\n"
        "üìä ‚Äî –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ üëá",
        reply_markup=main_keyboard
    )

# üëÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start_view
@router.message(F.text == "/start_view")
async def start_view_command_command(message: Message, state: FSMContext):
    await start_view_common(message, state)

# üëÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
@router.message(F.text == "üëÅ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ—Å–º–æ—Ç—Ä")
async def start_view_command_button(message: Message, state: FSMContext):
    await start_view_common(message, state)

# –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ FSM
async def start_view_common(message: Message, state: FSMContext):
    await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ Instagram-–ø—Ä–æ—Ñ–∏–ª–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    await state.set_state(ViewFSM.waiting_for_profiles)

# üßæ FSM: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
@router.message(ViewFSM.waiting_for_profiles)
async def process_profiles(message: Message, state: FSMContext):
    raw_input = message.text.strip()
    cleaned = ",".join([p.strip() for p in raw_input.split(",") if p.strip()])

    if not cleaned:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å:")
        return

    async with async_session() as session:
        result = await session.execute(
            select(Subscriber).where(Subscriber.telegram_id == message.from_user.id)
        )
        subscriber = result.scalar_one_or_none()

        if not subscriber:
            await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /submit_profile")
            await state.clear()
            return

        task = ViewTask(
            subscriber_id=subscriber.id,
            target_profiles=cleaned,
            scheduled_time=datetime.utcnow(),
            status="scheduled"
        )
        session.add(task)
        await session.commit()

    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–æ—Ä–∏—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ü—Ä–æ—Ñ–∏–ª–∏:\n{cleaned}")
    await state.clear()
