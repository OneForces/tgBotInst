from aiogram import Router, F
from aiogram.types import Message
from sqlalchemy import select
from db.database import async_session
from db.models import Subscriber, ViewTask, ViewResult

router = Router()

@router.message(F.text == "/view_status")
async def view_status(message: Message):
    async with async_session() as session:
        # –ù–∞–π–¥—ë–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –ø–æ Telegram ID
        result = await session.execute(
            select(Subscriber).where(Subscriber.telegram_id == message.from_user.id)
        )
        subscriber = result.scalar_one_or_none()

        if not subscriber:
            await message.answer("‚ö†Ô∏è –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /submit_profile")
            return

        # –ù–∞–π–¥—ë–º –≤—Å–µ –µ–≥–æ –∑–∞–¥–∞—á–∏
        result = await session.execute(
            select(ViewTask).where(ViewTask.subscriber_id == subscriber.id)
        )
        tasks = result.scalars().all()

        if not tasks:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä.")
            return

        response = "üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:</b>\n\n"
        for task in tasks:
            result = await session.execute(
                select(ViewResult).where(ViewResult.view_task_id == task.id)
            )
            results = result.scalars().all()

            if not results:
                response += f"üïì –ó–∞–¥–∞—á–∞ –æ—Ç {task.scheduled_time.strftime('%Y-%m-%d %H:%M')} ‚Äî –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
                continue

            response += f"üïì –ó–∞–¥–∞—á–∞ –æ—Ç {task.scheduled_time.strftime('%Y-%m-%d %H:%M')}:\n"
            for r in results:
                status = "‚úÖ" if r.success else "‚ùå"
                response += f"‚Ä¢ {r.profile_viewed} ‚Üê {r.viewer_account} {status} ({r.timestamp.strftime('%H:%M')})\n"
            response += "\n"

        await message.answer(response or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
