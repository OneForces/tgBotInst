from aiogram import Router, F, types
from sqlalchemy import select
from db.models import Subscriber
from db.database import async_session
from bot.services.pdf_report import export_user_report_pdf
import os

router = Router()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã
@router.message(F.text.in_({"üìä –ú–æ–π –æ—Ç—á—ë—Ç", "/my_report"}))
async def handle_user_report(message: types.Message):
    async with async_session() as session:
        result = await session.execute(
            select(Subscriber).where(Subscriber.telegram_id == message.from_user.id)
        )
        subscriber = result.scalar_one_or_none()

    if not subscriber:
        return await message.answer("‚ö†Ô∏è –í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ /submit_profile")

    await message.answer("üìÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PDF-–æ—Ç—á—ë—Ç...")

    file_path = await export_user_report_pdf(message.from_user.id)

    if file_path and os.path.exists(file_path):
        await message.answer_document(types.FSInputFile(file_path), caption="üìä –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
