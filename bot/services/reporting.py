# bot/services/reporting.py

from db.database import async_session
from db.models import ReelsTask, ViewTask, ViewResult

async def get_reels_report(task_id: int) -> str:
    async with async_session() as session:
        task = await session.get(ReelsTask, task_id)
    if not task:
        return f"–ó–∞–¥–∞—á–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å ID={task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    text = (
        f"üì£ –û—Ç—á—ë—Ç –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels ID={task.id}\n"
        f"‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: {task.created_at}\n"
        f"‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {task.scheduled_time}\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {task.status}\n"
    )
    if task.status == "error":
        text += f"‚Ä¢ –û—à–∏–±–∫–∞: {task.error_message}\n"
    return text

async def get_views_report(view_task_id: int) -> str:
    async with async_session() as session:
        vt = await session.get(ViewTask, view_task_id)
        if not vt:
            return f"–ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å ID={view_task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        result = await session.execute(
            select(ViewResult).where(ViewResult.task_id == view_task_id)
        )
        rows = result.scalars().all()
    lines = [f"üëÅÔ∏è –û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä—É ID={vt.id} (–ø—Ä–æ—Ñ–∏–ª—å: @{vt.target_profile})"]
    for r in rows:
        status = "‚úÖ" if r.success else "‚ùå"
        lines.append(f"‚Ä¢ {r.account}: {status} (–≤—Ä–µ–º—è {r.timestamp})")
    return "\n".join(lines)
