# scheduler/reels_scheduler.py

import traceback
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy import select, update
from datetime import datetime

from db.database import async_session
from db.models import ReelsTask
from bot.services.story_poster import post_reels_to_stories

async def check_and_post_reels():
    try:
        now = datetime.utcnow()
        print(f"[üïí] –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {now.isoformat()}")

        async with async_session() as session:
            result = await session.execute(
                select(ReelsTask)
                .where(
                    ReelsTask.status == "created",            # –∏–ª–∏ "pending", –µ—Å–ª–∏ –≤—ã —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç–µ
                    ReelsTask.scheduled_time <= now
                )
                .execution_options(no_cache=True)
            )
            tasks = result.scalars().all()
            print(f"[üìã] –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é: {len(tasks)}")

        for task in tasks:
            try:
                print(f"[‚è≥] –ü—É–±–ª–∏–∫–∞—Ü–∏—è Reels ID={task.id}")
                await post_reels_to_stories(task)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
                async with async_session() as session:
                    await session.execute(
                        update(ReelsTask)
                        .where(ReelsTask.id == task.id)
                        .values(status="done")
                    )
                    await session.commit()

                print(f"[‚úÖ] Reels ID={task.id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")

            except Exception as e:
                print(f"[‚ùå] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels ID={task.id}: {e}")
                traceback.print_exc()
                # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–æ–º–µ—Ç–∏—Ç—å —Å—Ç–∞—Ç—É—Å "error"
                async with async_session() as session:
                    await session.execute(
                        update(ReelsTask)
                        .where(ReelsTask.id == task.id)
                        .values(status="error")
                    )
                    await session.commit()

    except Exception as e:
        print(f"[üí•] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –∑–∞–¥–∞—á: {e}")
        traceback.print_exc()

def start_scheduler():
    scheduler = AsyncIOScheduler(timezone="UTC")
    # –ó–∞–ø—É—Å–∫ check_and_post_reels –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    scheduler.add_job(check_and_post_reels, "interval", minutes=1)
    scheduler.start()
    print("[üïí] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Reels –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª ‚Äí 1 –º–∏–Ω—É—Ç–∞)")
